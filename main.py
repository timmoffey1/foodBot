import logging
import aiohttp
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)
import firebase_admin
from firebase_admin import credentials, firestore
import easyocr
import cv2
import numpy as np
import io

import os
TELEGRAM_BOT_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]

logging.basicConfig(level=logging.INFO)

# Firebase
cred = credentials.Certificate("firebase_key.json")
firebase_admin.initialize_app(cred)
db = firestore.client()

# EasyOCR
reader = easyocr.Reader(['en'])  # –Ø–∑—ã–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CODE, QUALITY, REVIEW, CONFIRM_UPDATE = range(4)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
yes_no_keyboard = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
quality_keyboard = ReplyKeyboardMarkup([["1", "2", "3", "4", "5"]], one_time_keyboard=True, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º –∏–ª–∏ –≤–≤–µ–¥–∏ –µ–≥–æ –≤—Ä—É—á–Ω—É—é:")
    return CODE

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ –∏–∑ OpenFoodFacts
async def fetch_product_info(barcode: str):
    url = f"https://world.openfoodfacts.org/api/v0/product/{barcode}.json"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                if data.get("status") == 1:
                    product = data.get("product", {})
                    name = product.get("product_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                    brands = product.get("brands", "")
                    return {"name": name, "brands": brands}
            return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
async def code_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message

    if message.photo:
        photo_file = await message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        np_arr = np.frombuffer(photo_bytes, np.uint8)
        image = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

        results = reader.readtext(image, detail=0)
        barcodes = [r for r in results if r.isdigit() and len(r) >= 8]

        if barcodes:
            code = barcodes[0]
            await message.reply_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∫–æ–¥: {code}")
        else:
            await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë –∏–ª–∏ –≤–≤–µ–¥–∏ –≤—Ä—É—á–Ω—É—é.")
            return CODE
    else:
        code = message.text.strip()

    context.user_data['code'] = code
    product_ref = db.collection("products").document(code)
    doc = product_ref.get()
    user_id = update.effective_user.id

    if doc.exists:
        data = doc.to_dict()
        reviews = product_ref.collection("reviews").stream()
        reviews_data = []
        user_review = None

        for r in reviews:
            review = r.to_dict()
            review["_ref"] = r.reference
            reviews_data.append(review)
            if review.get("user_id") == user_id:
                user_review = review

        if user_review:
            context.user_data['existing_review_ref'] = user_review["_ref"]
            context.user_data['existing_review_text'] = user_review["review_text"]
            context.user_data['existing_review_rating'] = user_review["rating"]

            other_reviews = [r for r in reviews_data if r.get("user_id") != user_id]
            review_text = f"–¢–æ–≤–∞—Ä: {data.get('name')}\n\n"

            if other_reviews:
                other_reviews.sort(key=lambda r: r.get("rating", 0))
                worst = other_reviews[0]
                best = other_reviews[-1]
                review_text += (
                    f"üü• –•—É–¥—à–∏–π –æ—Ç–∑—ã–≤:\n‚≠ê {worst.get('rating')} ‚Äî {worst.get('review_text')}\n\n"
                    f"üü© –õ—É—á—à–∏–π –æ—Ç–∑—ã–≤:\n‚≠ê {best.get('rating')} ‚Äî {best.get('review_text')}\n\n"
                )
            else:
                review_text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –æ—Ç–∑—ã–≤–æ–≤.\n\n"

            review_text += (
                f"üü¶ –¢–≤–æ–π –æ—Ç–∑—ã–≤:\n‚≠ê {user_review['rating']} ‚Äî {user_review['review_text']}\n\n"
                "–•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤?"
            )

            await message.reply_text(review_text, reply_markup=yes_no_keyboard)
            return CONFIRM_UPDATE

        else:
            await message.reply_text(
                f"–¢–æ–≤–∞—Ä: {data.get('name')}\n\n–û—Ç–∑—ã–≤—ã:\n" +
                "\n".join([f"‚≠ê {r['rating']} ‚Äî {r['review_text']}" for r in reviews_data]) +
                "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏ —Ç–æ–≤–∞—Ä –æ—Ç 1 –¥–æ 5:",
                reply_markup=quality_keyboard
            )
            return QUALITY
    else:
        await message.reply_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ò—â—É –≤ Open Food Facts...")
        product_info = await fetch_product_info(code)
        if product_info:
            name = product_info.get("name")
            brands = product_info.get("brands")
            full_name = f"{name} ({brands})" if brands else name
            context.user_data['name'] = full_name
            await message.reply_text(
                f"–ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä:\n{full_name}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ—Ç 1 –¥–æ 5:",
                reply_markup=quality_keyboard
            )
            return QUALITY
        else:
            await message.reply_text(
                "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.\n"
                "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤—Ä—É—á–Ω—É—é:"
            )
            return QUALITY

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def confirm_update_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text.lower()
    if answer == "–¥–∞":
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ. –û—Ü–µ–Ω–∏ —Ç–æ–≤–∞—Ä –æ—Ç 1 –¥–æ 5:",
            reply_markup=quality_keyboard
        )
        return QUALITY
    else:
        await update.message.reply_text(
            "–û–∫, –æ—Ç–∑—ã–≤ –æ—Å—Ç–∞–≤–∏–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —à—Ç—Ä–∏—Ö–∫–æ–¥ –∏–ª–∏ —Ñ–æ—Ç–æ."
        )
        context.user_data.clear()
        return CODE

# –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
async def quality_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quality = update.message.text.strip()
    if quality not in ['1', '2', '3', '4', '5']:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5:",
            reply_markup=quality_keyboard
        )
        return QUALITY

    context.user_data['quality'] = int(quality)
    await update.message.reply_text(
        "–û—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤ –æ —Ç–æ–≤–∞—Ä–µ:",
        reply_markup=ReplyKeyboardRemove()
    )
    return REVIEW

# –û—Ç–∑—ã–≤
async def review_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['review'] = update.message.text.strip()
    code = context.user_data['code']
    name = context.user_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')

    product_ref = db.collection("products").document(code)
    product_ref.set({"name": name}, merge=True)

    if 'existing_review_ref' in context.user_data:
        context.user_data['existing_review_ref'].set({
            "user_id": update.effective_user.id,
            "rating": context.user_data['quality'],
            "review_text": context.user_data['review'],
            "timestamp": firestore.SERVER_TIMESTAMP
        })
    else:
        product_ref.collection("reviews").add({
            "user_id": update.effective_user.id,
            "rating": context.user_data['quality'],
            "review_text": context.user_data['review'],
            "timestamp": firestore.SERVER_TIMESTAMP
        })

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–º –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é."
    )
    context.user_data.clear()
    return CODE

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CODE: [MessageHandler(filters.TEXT | filters.PHOTO, code_handler)],
            QUALITY: [MessageHandler(filters.TEXT, quality_handler)],
            REVIEW: [MessageHandler(filters.TEXT, review_handler)],
            CONFIRM_UPDATE: [MessageHandler(filters.TEXT, confirm_update_handler)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
